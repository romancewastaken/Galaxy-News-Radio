var songCounter = 0;

const onAirArt = `
     _________
    |         |
    |  GNR    |
    |_________|
  |#############|
  |#####(___)###|
  |# [ON AIR] ##|
  \#############/
    | |     | |`;

const vaultBoyArt = `
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£Ä‚£¥‚†∑‚£∂‚£Ñ‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£∑‚£æ‚†ü‚†õ‚†õ‚†ã‚†Ä‚†à‚†â‚†õ‚£ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚†à‚†â‚£°‚°¥‚†∂‚£§‚†∂‚†∑‚£¶‚†Ä‚£Ä‚£à‚†ª‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£≥‚£æ‚£Ø‚†Ä‚†Ä‚†Ä‚†Ä‚£§‚°à‚†â‚†â‚¢π‚°á‚¢π‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ò‚£ø‚†ã‚£§‚°Ñ‚†Ä‚£§‚†Ä‚¢Ä‚°à‚†ì‚†Ä‚£º‚£ø‚£Ñ‚¢∏‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚£¥‚°ø‚†õ‚†õ‚£ø‚°ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚°ü‚†Ä‚†õ‚¢°‚°æ‚†ã‚†Ä‚†∏‚†á‚†Ä‚†Ä‚£æ‚£ø‚£ø‚£æ‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚¢∏‚£ø‚†Ä‚†Ä‚¢∞‚£ø‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°á‚¢Ä‚°Ä‚†ò‚†ó‚†Ä‚†Ä‚£§‚°Ä‚†Ä‚†Ä‚†à‚†õ‚¢ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢Ä‚£†‚£®‚£ø‚£Ü‚†Ä‚†π‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚†π‚†Ø‚£ø‚£í‚£ö‚£≠‚†ø‚°ü‚†Ä‚†Ä‚¢Ä‚£†‚£æ‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚†õ‚†â‚†â‚†õ‚†≥‚¢¶‚°à‚¢ø‚£¶‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£∑‚°Ä‚†ò‚†õ‚†É‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚†∂‚†∂‚†∂‚†¶‚£§‚£®‚°á‚†Ä‚£ø‚°ø‚¢∑‚£∂‚£∂‚£¶‚£¥‚£æ‚£ø‚°ü‚†∂‚£§‚£Ä‚£Ä‚°Ä‚¢ò‚£ø‚†è‚¢π‚°ü‚†ø‚£∑‚£¶‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚£§‚£§‚£§‚£Ä‚£Ä‚¢ô‚°Ü‚£∞‚¢è‚°á‚†Ä‚†Ä‚†à‚†â‚†â‚†Ä‚†Ä‚†≥‚£Ñ‚°à‚†õ‚†õ‚†õ‚†ã‚†Å‚£Ä‚£º‚†É‚†Ä‚†Ä‚†ô‚†ª‚£ø‚£¶‚°Ä‚†Ä‚†Ä
‚£ø‚°Ö‚¢∞‚£Ñ‚†à‚†â‚£ª‚¢Å‚°Ω‚£∏‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†õ‚£¶‚†Ä‚†Ä‚¢π‚°ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£ø‚£Ü‚†Ä
‚†ò‚†ª‚£∂‚£≠‚£ø‚£ø‚£ø‚£ü‚£±‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£æ‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚†Ä‚†Ä‚†à‚°á‚†Ä‚†Ä‚¢ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ª‚°á
‚†Ä‚†Ä‚†Ä‚†â‚†â‚†â‚†õ‚†õ‚†ø‚£∑‚°ñ‚†í‚£∂‚°ø‚†õ‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚°á‚†Ä‚†Ä‚¢π‚†Ä‚†Ä‚¢∏‚°Ü‚£¥‚°ñ‚†Ä‚†Ä‚†Ä‚†Ä‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢∏‚°Ü‚†Ä‚†à‚£ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚†á
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚°á‚£Ä‚£¥‚¢ø‚£Ä‚°Ä‚†Ä‚†Ä‚£∞‚°è‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚°è‚†ô‚†≥‚†∂‚†¶‚£§‚£§‚°á‚†Ä‚†Ä‚†Ä‚†õ‚†â‚†Ä‚¢∏‚†â‚†ô‚¢∑‚£æ‚°ü‚†Å‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£æ‚°Ü‚£Ä‚£º‚°ø‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚†ô‚†∑‚¢¶‚£§‚£Ñ‚£Ä‚£Ä‚£†‚£§‚£§‚°∂‚†æ‚†õ‚†â‚¢∏‚£á‚£π‚£ø‚†á‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚†â‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚°ø‚¢∏‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚†É‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚†É‚†Ä‚¢∏‚£∑‚£¶‚£§‚£§‚£§‚£¥‚£ø‚£∑‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚†Å‚†Ä‚†Ä‚†à‚†ª‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚¢ø‚°ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚†â‚†â‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
`;

const vaultBoySmall = `
‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†ø‚£´‚£≠‚£ù‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚°ü‚£¥‚£ú‚£õ‚£´‚£∂‚£ø‚£∑‚£æ‚£ø‚£ø‚£ø‚£∑‚£Æ‚°ô‚£ø‚£ø‚£ø
‚£ø‚£ø‚†á‚¢ø‚£ø‚°ø‚£ã‚£•‚£ç‚£õ‚£´‚£ç‚†ô‚£ø‚£ø‚£ø‚£ø‚£ù‚¢ø‚£ø
‚£ø‚£ø‚¢∏‚¢£‚£ñ‚£ö‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£∑‚£¨‚£Ø‚£≠‚°ù‚¢ø‚°é‚¢ª
‚£ø‚°ø‚£∞‚£ø‚†ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£π‚£ø‚£ø‚°ø‚£ã‚£º‚£ø‚¢∏
‚£ø‚¢±‚£ø‚£ø‚£¥‚£ø‚¢ü‚£¥‚£ø‚£ø‚†Å‚£ø‚£ø‚£ø‚¢ª‚¢ò‚¢é‚¢ø‚°è‚£∏
‚°è‚¢∏‚£ø‚£ø‚£ø‚°Ñ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚°≤‚°ô‚†ò‚£∞‚£ø
‚£á‚¢∏‚°Å‚£ù‚£ø‚£ø‚£ø‚£ø‚£ø‚°õ‚¢ø‚£ø‚£ø‚£ø‚£∑‚£¥‚°è‚¢¥‚£ø‚£ø
‚£ø‚°ò‚£∑‚£∑‚£≠‚£õ‚£õ‚£õ‚£Ø‚£µ‚£∏‚£ø‚£ø‚£æ‚£ø‚°ø‚†è‚£º‚£ø‚£ø
‚£ø‚£∑‚°ò‚¢ø‚£ø‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ã‚£¥‚£∂‚£æ‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£¶‚°ù‚†ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚†Ö‚£∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£Ä‚£í‚£õ‚£ã‚£•‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
`;

const config = require('./config.json');
const port = config.serverPort;
const express = require('express');
const fs = require('fs');
const path = require('path');
const folderLoader = require('./handler/folderLoader.js');
const musicDir = path.join(__dirname, 'media');
const { Station, PUBLIC_EVENTS, SHUFFLE_METHODS } = require('@fridgefm/radio-core');
const app = express();
const station = new Station
({
  verbose: false, //enable if you want more logging
  responseHeaders: 
  {
    'Content-Type': 'audio/mpeg',
    'Transfer-Encoding': 'chunked',
    'Genre': 'classic'
  }
});

station.addFolder(path.join(musicDir, 'music'));
station.addFolder(path.join(musicDir, 'intros'));
station.addFolder(path.join(musicDir, 'outros'));

const intros = folderLoader.loadFolder(musicDir, 'intros');
const outros = folderLoader.loadFolder(musicDir, 'outros');


app.get('/stream', (req, res) => 
{
  if (config.keepServerAlive)
  {
    req.socket.setTimeout(0);
    const keepAlive = setInterval(() => 
    {
      if (!res.writableEnded) 
      {
        res.write(Buffer.from([0]));
      }
      else 
      {
        clearInterval(keepAlive);
      }
    }, 15000);
    req.on('close', () => clearInterval(keepAlive));
  }
  station.connectListener(req, res);
});

station.on(PUBLIC_EVENTS.NEXT_TRACK, async track => 
{
  const meta = await track.getMetaAsync();
  console.log('‚ñ∂Ô∏è  Playing:', meta.title || meta.path);

  songCounter++;
  if (songCounter < config.songsBetweenTracks)
  {
    return;
  }
  songCounter = 0;

  const isIntro = Math.random() > 0.5;
  const pool = isIntro ? intros : outros;
  const fileUrl = pool[Math.floor(Math.random() * pool.length)];
  const fileName = path.basename(fileUrl);
  console.log(`üéôÔ∏è Injecting audio: ${fileName}`);

  const folderName = isIntro ? 'intros' : 'outros';
  const fullPath = path.join(musicDir, folderName, fileName);

  const playlist = station.getPlaylist();
  const injectedTrack = playlist.find(t => t.fsStats.fullPath === fullPath);

  if (!injectedTrack) 
  {
    console.log(`‚ö†Ô∏è Could not find ${fileName}`);
    return;
  }

  station.reorderPlaylist((list) => 
  {
    return [list[0], injectedTrack, ...list.slice(1)];
  });

  station.next();
});

station.on(PUBLIC_EVENTS.START, () => 
{
  console.log('Radio started');
  station.reorderPlaylist(SHUFFLE_METHODS.randomShuffle());
  station.next();
});

station.on(PUBLIC_EVENTS.RESTART, () => 
{
  console.log('Shuffling event started');
  station.reorderPlaylist(SHUFFLE_METHODS.randomShuffle());
});

station.on(PUBLIC_EVENTS.ERROR, (err) => 
{
  console.log(`Error: ${err}`);
});

app.listen(port, async () => 
{
  console.clear();
  console.log(vaultBoySmall);
  console.log(`üéôÔ∏è You're listening to Galaxy News Radio, bringing you the truth, no matter how bad it hurts.`);
  try 
  {
    await station.start();
  } 
  catch (err) 
  {
    process.exit(1);
  }
});

app.get(`/api/shuffle/:token`, (req, res) =>
{
    var apitoken = req.params.token;
  
    fs.readFile('./data/devTokens.json', "utf8", (err, data) =>
    {
        if (err)
        {
          res.status(500).send
          ({
            msg: "Error reading tokens, please try again."
          })
        } 
        else
        {
            const tokens = JSON.parse(data).tokens;
            
            if (tokens.find(token => token == apitoken) != undefined) 
            {
              console.log('Manual shuffle event started');
              station.reorderPlaylist(SHUFFLE_METHODS.randomShuffle());
              station.next();
              res.status(200).send
              ({
                msg: "Shuffled playlist"
              })
            }
            else
            {
              res.status(200).send
              ({
                msg: "Incorrect token"
              })
            }
        }
    });
})